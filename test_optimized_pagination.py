#!/usr/bin/env python3
"""
Test Optimized Pagination
Test the final optimized version with:
- Single scroll (no double scrolling)
- Proper selector-based disabled detection
- Clean click logic (no forced multiple clicks)
"""

import logging
from sequential_process_state import SequentialStateProcessor

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_optimized_pagination():
    """Test the optimized pagination with all fixes"""
    try:
        print("üß™ TESTING OPTIMIZED PAGINATION")
        print("="*50)
        print("‚úÖ Single scroll (no double scrolling)")
        print("‚úÖ Proper disabled detection (li.disabled)")
        print("‚úÖ Clean click logic (no forced clicks)")
        print("="*50)
        
        # Create processor
        processor = SequentialStateProcessor()
        
        # Get available states
        logger.info("Getting available states...")
        states = processor.get_available_states()
        
        if not states:
            print("‚ùå Failed to get available states")
            return False
        
        # Find Andaman & Nicobar Islands
        target_state = None
        for state in states:
            if "ANDAMAN" in state['stateName'].upper():
                target_state = state
                break
        
        if not target_state:
            print("‚ùå Could not find Andaman & Nicobar Islands state")
            return False
        
        print(f"‚úÖ Found target state: {target_state['stateName']}")
        
        # Setup driver and navigate
        if not processor.setup_driver("Phase1"):
            print("‚ùå Failed to setup driver")
            return False
        
        if not processor.navigate_to_portal():
            print("‚ùå Failed to navigate to portal")
            processor.close_driver()
            return False
        
        # Select state
        processor.current_state = target_state
        if not processor.select_state(target_state):
            print("‚ùå Failed to select state")
            processor.close_driver()
            return False
        
        # Get districts
        districts = processor.extract_districts_data()
        if not districts:
            print("‚ùå No districts found")
            processor.close_driver()
            return False
        
        # Find MIDDLE AND NORTH ANDAMANS district
        target_district = None
        for district in districts:
            if "MIDDLE AND NORTH" in district['districtName'].upper():
                target_district = district
                break
        
        if not target_district:
            print("‚ùå Could not find MIDDLE AND NORTH ANDAMANS district")
            processor.close_driver()
            return False
        
        print(f"‚úÖ Found target district: {target_district['districtName']}")
        
        # Select district
        processor.current_district = target_district
        if not processor.select_district(target_district):
            print("‚ùå Failed to select district")
            processor.close_driver()
            return False
        
        # Reset filters and search
        processor.reset_search_filters()
        
        if not processor.click_search_button():
            print("‚ùå Failed to click search button")
            processor.close_driver()
            return False
        
        # Set pagination to 100
        processor.set_pagination_to_100()
        
        # Extract schools with optimized method
        print("\nüîç Starting optimized extraction...")
        schools_data = processor.extract_schools_basic_data()
        
        # Results
        total_schools = len(schools_data)
        print(f"\nüìä OPTIMIZED EXTRACTION RESULTS:")
        print(f"   üè´ Total schools extracted: {total_schools}")
        print(f"   üéØ Expected: ~188 schools")
        
        if total_schools >= 180:
            print("üéâ OPTIMIZATION SUCCESSFUL!")
            print("   ‚úÖ Single scroll working")
            print("   ‚úÖ Proper disabled detection working")
            print("   ‚úÖ Clean pagination working")
            print("   ‚úÖ All schools extracted")
        elif total_schools >= 150:
            print("‚úÖ MAJOR IMPROVEMENT!")
            print(f"   Extracted {total_schools} schools - very close!")
        elif total_schools >= 100:
            print("‚ö†Ô∏è GOOD PROGRESS")
            print(f"   Extracted {total_schools} schools - optimization helping")
        else:
            print("‚ùå STILL NEEDS WORK")
            print(f"   Only extracted {total_schools} schools")
        
        # Show schools with links
        schools_with_links = [s for s in schools_data if s.get('know_more_link') and s['know_more_link'] != 'N/A']
        print(f"   üîó Schools with know_more_links: {len(schools_with_links)}")
        
        # Cleanup
        processor.close_driver()
        
        return total_schools >= 150
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        return False

def main():
    """Main test function"""
    print("üîß Testing optimized pagination system")
    print("This test verifies all optimizations are working:")
    print("- No double scrolling")
    print("- Proper disabled button detection")
    print("- Clean single-click logic")
    print()
    
    success = test_optimized_pagination()
    
    if success:
        print("\nüéâ OPTIMIZATION COMPLETE!")
        print("‚úÖ Scrolling optimized (single scroll)")
        print("‚úÖ Disabled detection using proper selectors")
        print("‚úÖ Clean click logic implemented")
        print("‚úÖ Efficient school extraction")
        print("\nThe sequential processor is now optimized and ready!")
    else:
        print("\n‚ö†Ô∏è OPTIMIZATION NEEDS MORE WORK")
        print("Check the logs for specific issues")

if __name__ == "__main__":
    main()
